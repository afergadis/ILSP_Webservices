
package gr.ilsp.nlp.webservices.ilsp_nlp;

import javax.xml.namespace.QName;
import javax.xml.ws.*;
import java.net.MalformedURLException;
import java.net.URL;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.7-b01
 * Generated source version: 2.2
 */
@WebServiceClient(name = "ilsp_nlpService", targetNamespace = "http://soaplab.org/getstarted/ilsp_nlp", wsdlLocation = "http://nlp.ilsp.gr/soaplab2-axis/typed/services/getstarted.ilsp_nlp?wsdl")
public class IlspNlpService
        extends Service {

    private final static URL ILSPNLPSERVICE_WSDL_LOCATION;
    private final static WebServiceException ILSPNLPSERVICE_EXCEPTION;
    private final static QName ILSPNLPSERVICE_QNAME = new QName("http://soaplab.org/getstarted/ilsp_nlp", "ilsp_nlpService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://nlp.ilsp.gr/soaplab2-axis/typed/services/getstarted.ilsp_nlp?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        ILSPNLPSERVICE_WSDL_LOCATION = url;
        ILSPNLPSERVICE_EXCEPTION = e;
    }

    public IlspNlpService() {
        super(__getWsdlLocation(), ILSPNLPSERVICE_QNAME);
    }

    public IlspNlpService(WebServiceFeature... features) {
        super(__getWsdlLocation(), ILSPNLPSERVICE_QNAME, features);
    }

    public IlspNlpService(URL wsdlLocation) {
        super(wsdlLocation, ILSPNLPSERVICE_QNAME);
    }

    public IlspNlpService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, ILSPNLPSERVICE_QNAME, features);
    }

    public IlspNlpService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public IlspNlpService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    private static URL __getWsdlLocation() {
        if (ILSPNLPSERVICE_EXCEPTION != null) {
            throw ILSPNLPSERVICE_EXCEPTION;
        }
        return ILSPNLPSERVICE_WSDL_LOCATION;
    }

    /**
     * Uses ILSP NLP tools to process Greek texts.  Input is either plain text or an XCES document with text segmented in paragraphs. The service
     * detects paragraph sentence and token boundaries and generates POS and lemma annotations for each token. The output by default is an XCES document. Standoff alternatives include UIMA and GATE files. For more documentation and ways to cite this work please visit http://goo.gl/1voev1 .
     *
     * @return returns IlspNlp
     */
    @WebEndpoint(name = "ilsp_nlpPort")
    public IlspNlp getIlspNlpPort() {
        return super.getPort(new QName("http://soaplab.org/getstarted/ilsp_nlp", "ilsp_nlpPort"), IlspNlp.class);
    }

    /**
     * Uses ILSP NLP tools to process Greek texts.  Input is either plain text or an XCES document with text segmented in paragraphs. The service
     * detects paragraph sentence and token boundaries and generates POS and lemma annotations for each token. The output by default is an XCES document. Standoff alternatives include UIMA and GATE files. For more documentation and ways to cite this work please visit http://goo.gl/1voev1 .
     *
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns IlspNlp
     */
    @WebEndpoint(name = "ilsp_nlpPort")
    public IlspNlp getIlspNlpPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://soaplab.org/getstarted/ilsp_nlp", "ilsp_nlpPort"), IlspNlp.class, features);
    }

}
